#########################
### Queries for public data
##########################

# Get a product by handle
query GetProduct($id: String!) @auth(level: PUBLIC, insecureReason: "Public data") {
  product(id: $id) {
    id
    title
    description
    availableForSale
    createdAt
    updatedAt
    featuredImage {
      url
      width
      height
      altText
    }
    seo {
      title
      description
      keywords
    }
    variants: productVariants_on_product {
      sku
      price
      availableForSale
      inventoryQuantity
      selectedOptions_on_productVariant {
        name
        value
      }
    }
  }
}

query GetProductReviews($productId: String!) @auth(level: PUBLIC,  insecureReason: "Public data") {
  reviews: productReviews(where: { productId: { eq: $productId }}, orderBy: [{ date: DESC }]) {
    id
    rating
    content
    date
    customer {
      id
      firstName
      lastName
    }
  }
}


# Get a collection by handle
query GetCollection($id: String!) @auth(level: PUBLIC, insecureReason: "public data") {
  collection(id: $id) {
    id
    name
    description
    page
    featuredImage {
      url
      width
      height
      altText
    }
    seo {
      title
      description
      keywords
    }
    products: products_via_ProductCollection {
      id
      title
      description
      availableForSale
      createdAt
      updatedAt
      featuredImage {
        url
        width
        height
        altText
      }
      variants: productVariants_on_product {
        sku
        price
        availableForSale
        inventoryQuantity
        selectedOptions: selectedOptions_on_productVariant {
          name
          value
        }
      }
    }
  }
}

# Get collections by page
query GetCollectionsByPage($page: String) @auth(level: PUBLIC, insecureReason: "public data") {
  collections(where: { page: { eq: $page } }) {
    id
    name
    description
    page
    featuredImage {
      url
      width
      height
      altText
    }
    products: products_via_ProductCollection {
      id
      title
      description
      featuredImage {
        url
        width
        height
        altText
      }
      variants: productVariants_on_product {
        sku
        price
        title
        selectedOptions: selectedOptions_on_productVariant {
          name
          value
        }
      }
    }
  }
}

# Get products by its description using vector search
query Search($query: String!) @auth(level: PUBLIC, insecureReason: "public data") {
  productsByDescription: products_descriptionEmbedding_similarity(
    compare_embed: { model: "text-embedding-005", text: $query }
    method: COSINE
    within: 0.99
    limit: 20
  ) {
    id
    title
    _metadata {
      distance
    }
  }
  productsByTitle: products_titleEmbedding_similarity(
    compare_embed: { model: "text-embedding-005", text: $query }
    method: COSINE
    within: 0.99
    limit: 20
  ) {
    id
    title
    _metadata {
      distance
    }
  }
  reviews: productReviews_contentEmbedding_similarity(
    compare_embed: { model: "text-embedding-005", text: $query }
    method: COSINE
    within: 0.90
    limit: 20
  ) {
    product {
      id
      title
      _metadata {
        distance
      }
    }
  }
}

#########################
### Queries for authenticated users
##########################

# Get the orders of a customer by ID
query GetCurrentUserOrders @auth(level: USER) {
  orders(where: { customerId: { eq_expr: "auth.uid"  }}) {
    id
    customerId
    processedAt
    chargeId
    paymentIntentId
    receiptUrl
    subtotalPrice
    totalPrice
    financialStatus
    fulfillmentStatus
    items: orderItems_on_order {
      id
      quantity
      price
      product {
        id
        title
        featuredImage {
          url
        }
      }
    }
  }
}

# Get a order of the logged in customer by ID
query GetOrder($id: UUID!) @auth(level: USER, insecureReason: "Checked manually with @check") {
  order(id: $id) {
    id
    customerId
      @check(expr: "this == auth.uid", message: "Customers can only view orders they placed.")
    shippingStreet1
    shippingStreet2
    shippingCity
    shippingState
    shippingZip
    processedAt
    receiptUrl
    totalPrice
    financialStatus
    fulfillmentStatus
    items: orderItems_on_order {
      id
      quantity
      price
      product {
        id
        title
        featuredImage {
          url
          width
          height
          altText
        }
      }
    }
  }
}

#######################
### Administrative utilities, mostly for demo purposes
#######################

query GetAllOrders @auth(level: NO_ACCESS) {
  orders {
    id
    customerId
    processedAt
    receiptUrl
    totalPrice
    financialStatus
    fulfillmentStatus
    paymentIntentId
    items: orderItems_on_order {
      id
      price
      product {
        id
        title
      }
    }
  }
}

# List all users, only admins should be able to list all users, so we use NO_ACCESS
query ListAllCustomers @auth(level: NO_ACCESS) {
  customers {
    id
    firstName
    lastName
    email
  }
}
